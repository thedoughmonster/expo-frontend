/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/config/snapshot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Toast configuration snapshot
         * @description Fetches a fixed set of Toast configuration slices and caches the merged payload for one hour.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Configuration snapshot returned successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConfigSnapshotResponse"];
                    };
                };
                /** @description Unexpected error response. */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/docs/openapi.js": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch the OpenAPI definition as an ES module
         * @description Returns the OpenAPI schema wrapped in a JavaScript module `export default` statement, useful for importing directly into documentation tooling.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OpenAPI schema module returned successfully. */
                200: {
                    headers: {
                        /** @description Hints that the schema can be cached by clients for five minutes while allowing stale reuse for a day. */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/javascript": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/docs/openapi.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch the OpenAPI definition
         * @description Returns the OpenAPI schema for the Doughmonster Worker API, suitable for AI agents and client code generation.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OpenAPI schema returned successfully. */
                200: {
                    headers: {
                        /** @description Hints that the schema can be cached by clients for five minutes while allowing stale reuse for a day. */
                        "Cache-Control"?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OpenApiDocument"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Returns `{"ok": true}` when the worker is healthy.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Worker is available. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/menus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve the cached Toast menu document
         * @description Returns the currently cached Toast menus document along with cache metadata. Append `?refresh=1` (or any other truthy value) to force a synchronous refresh before responding.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Force a synchronous refresh of the published menu when set to a truthy value. */
                    refresh?: components["parameters"]["MenusRefresh"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Menu document retrieved successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MenusResponse"];
                    };
                };
                /** @description Upstream Toast API failure. */
                502: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unexpected error response. */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch the most recent Toast orders
         * @description Returns the most recent Toast orders using the worker's incremental KV-backed cache. By default the worker returns the five newest orders with full detail. Pass `detail=ids` to receive only the GUIDs while retaining ordering.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of orders to return (defaults to 5). */
                    limit?: components["parameters"]["OrdersLatestLimit"];
                    /** @description Toggle payload verbosity (`full` returns hydrated orders, `ids` returns GUIDs only). */
                    detail?: components["parameters"]["OrdersLatestDetail"];
                    /** @description Override the rolling window with an explicit lookback in minutes. */
                    minutes?: components["parameters"]["OrdersLatestMinutes"];
                    /** @description Hint for the Toast bulk API page size (advanced diagnostics only). */
                    pageSize?: components["parameters"]["OrdersLatestPageSize"];
                    /** @description ISO-8601 timestamp that constrains the lower bound of the fetch window. */
                    start?: components["parameters"]["OrdersLatestStart"];
                    /** @description ISO-8601 timestamp that constrains the upper bound of the fetch window. */
                    end?: components["parameters"]["OrdersLatestEnd"];
                    /** @description Override the internal cursor with an ISO-8601 timestamp (debugging aid). */
                    since?: components["parameters"]["OrdersLatestSince"];
                    /** @description Explicit Toast business date (yyyyMMdd) to anchor the fetch window. */
                    businessDate?: components["parameters"]["OrdersLatestBusinessDate"];
                    /** @description IANA time zone identifier used to interpret time-based parameters (defaults to UTC). */
                    timeZone?: components["parameters"]["OrdersLatestTimeZone"];
                    /** @description Include extended diagnostics when `true` and the worker runs with `DEBUG` enabled. */
                    debug?: components["parameters"]["OrdersLatestDebug"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Orders fetched successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OrdersLatestResponse"];
                    };
                };
                /** @description Error response emitted when the worker cannot return orders successfully. */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ConfigSnapshotResponse: {
            /** Format: date-time */
            updatedAt: string;
            ttlSeconds: number;
            data: {
                /** @description Toast diningOptions slice payload when available. */
                diningOptions: {
                    [key: string]: unknown;
                } | unknown[] | string | number | boolean | null;
                /** @description Toast orderTypes slice payload when available. */
                orderTypes: {
                    [key: string]: unknown;
                } | unknown[] | string | number | boolean | null;
                /** @description Toast revenueCenters slice payload when available. */
                revenueCenters: {
                    [key: string]: unknown;
                } | unknown[] | string | number | boolean | null;
                /** @description Toast serviceAreas slice payload when available. */
                serviceAreas: {
                    [key: string]: unknown;
                } | unknown[] | string | number | boolean | null;
                /** @description Toast taxRates slice payload when available. */
                taxRates: {
                    [key: string]: unknown;
                } | unknown[] | string | number | boolean | null;
                /** @description Toast discounts slice payload when available. */
                discounts: {
                    [key: string]: unknown;
                } | unknown[] | string | number | boolean | null;
            };
        };
        DiagnosticsCounters: {
            ordersSeen?: number;
            checksSeen?: number;
            itemsIncluded?: number;
            dropped?: {
                ordersVoided?: number;
                ordersTimeParse?: number;
                selectionsVoided?: number;
                selectionsFiltered?: number;
            };
            totals?: {
                baseItemsSubtotalCents?: number;
                modifiersSubtotalCents?: number;
                discountTotalCents?: number;
                serviceChargeCents?: number;
                tipCents?: number;
                grandTotalCents?: number;
            };
        } & {
            [key: string]: unknown;
        };
        ErrorObject: {
            message: string;
            /** @description Machine readable error code when available. */
            code?: string;
        };
        ErrorResponse: {
            /** @constant */
            ok: false;
            error: components["schemas"]["ErrorObject"] | string;
        } & {
            [key: string]: unknown;
        };
        ExpandedOrder: {
            orderData: components["schemas"]["ExpandedOrderData"];
            currency?: string | null;
            items: components["schemas"]["ExpandedOrderItem"][];
            totals: components["schemas"]["ExpandedOrderTotals"];
        };
        ExpandedOrderData: {
            orderId: string;
            location?: {
                locationId?: string | null;
            };
            /** Format: date-time */
            orderTime: string;
            timeDue?: string | null;
            orderNumber?: string | null;
            checkId?: string | null;
            status?: string | null;
            fulfillmentStatus?: string | null;
            customerName?: string | null;
            orderType: string;
            orderTypeNormalized?: ("TAKEOUT" | "DELIVERY" | "DINE_IN" | "CURBSIDE" | "DRIVE_THRU" | "CATERING" | "UNKNOWN") | null;
            diningOptionGuid?: string | null;
            deliveryState?: string | null;
            deliveryInfo?: {
                [key: string]: unknown;
            } | null;
            curbsidePickupInfo?: {
                [key: string]: unknown;
            } | null;
            table?: {
                [key: string]: unknown;
            } | null;
            seats?: number[] | null;
            employee?: {
                [key: string]: unknown;
            } | null;
            promisedDate?: string | null;
            estimatedFulfillmentDate?: string | null;
        };
        ExpandedOrderItem: {
            lineItemId: string;
            menuItemId?: string | null;
            itemName: string;
            quantity: number;
            fulfillmentStatus?: string | null;
            modifiers: components["schemas"]["ExpandedOrderItemModifier"][];
            specialInstructions?: string | null;
            money?: components["schemas"]["ExpandedOrderItemMoney"] | null;
        };
        ExpandedOrderItemModifier: {
            id?: string | null;
            name: string;
            groupName?: string | null;
            priceCents: number;
            quantity: number;
        };
        ExpandedOrderItemMoney: {
            baseItemPriceCents?: number;
            modifierTotalCents?: number;
            totalItemPriceCents?: number;
        };
        ExpandedOrderTotals: {
            baseItemsSubtotalCents: number;
            modifiersSubtotalCents: number;
            discountTotalCents: number;
            serviceChargeCents: number;
            tipCents: number;
            grandTotalCents: number;
        };
        HealthResponse: {
            /** @constant */
            ok: true;
        };
        MenusResponse: components["schemas"]["MenusSuccess"] | components["schemas"]["ErrorResponse"];
        MenusSuccess: {
            /** @constant */
            ok: true;
            menu: components["schemas"]["ToastMenusDocument"] | null;
            metadata: {
                lastUpdated: string | null;
            };
            cacheHit: boolean;
        };
        /** @description OpenAPI document describing the Doughmonster Worker HTTP interface. */
        OpenApiDocument: {
            [key: string]: unknown;
        };
        OrderCursor: {
            ts?: string | null;
            orderGuid?: string | null;
            businessDate?: number | null;
        };
        OrdersDetailedDebug: {
            requestId?: string;
            timingMs?: number;
            ordersTrace?: components["schemas"]["UpstreamTrace"];
            menuTrace?: components["schemas"]["UpstreamTrace"];
            window?: {
                startIso: string | null;
                endIso: string | null;
            };
            limit?: number;
            originSeen?: string;
            lastPage?: number;
            timedOut?: boolean;
            diagnostics?: components["schemas"]["DiagnosticsCounters"] | null;
            lookbackWindowsTried?: number[];
            ordersFetched?: number;
            ordersUpstream?: components["schemas"]["UpstreamTrace"];
            menuUpstream?: components["schemas"]["UpstreamTrace"];
        } & {
            [key: string]: unknown;
        };
        OrdersDetailedError: {
            error: components["schemas"]["ErrorObject"];
            debug?: components["schemas"]["OrdersDetailedDebug"] | null;
        } & {
            [key: string]: unknown;
        };
        OrdersDetailedResponse: components["schemas"]["OrdersDetailedSuccess"] | components["schemas"]["OrdersDetailedError"] | components["schemas"]["ErrorResponse"];
        OrdersDetailedSuccess: {
            orders: components["schemas"]["ExpandedOrder"][];
            cacheInfo: {
                /** @description Cache status for the menu payload (for example `hit-fresh` or `miss-network`). */
                menu: string;
                menuUpdatedAt: string | null;
            };
            debug?: components["schemas"]["OrdersDetailedDebug"] | null;
        };
        OrdersLatestBase: {
            /** @constant */
            ok: true;
            /**
             * @description Echoed route path.
             * @example /api/orders
             */
            route: string;
            limit: number;
            /** @enum {string} */
            detail: "full" | "ids";
            minutes: number | null;
            window: {
                start: string | null;
                end: string | null;
                businessDate?: string;
                timeZone?: string;
            };
            pageSize: number;
            expandUsed: string[];
            count: number;
            ids: string[];
            orders?: components["schemas"]["ToastOrder"][] | string[];
            data?: components["schemas"]["ToastOrder"][] | null;
            sources?: components["schemas"]["OrdersLatestSource"][];
            debug?: components["schemas"]["OrdersLatestDebug"] | null;
        };
        OrdersLatestDebug: {
            fetchWindow?: {
                /** Format: date-time */
                start: string;
                /** Format: date-time */
                end: string;
            };
            cursorBefore?: components["schemas"]["OrderCursor"] | null;
            cursorAfter?: components["schemas"]["OrderCursor"] | null;
            pages?: {
                page?: number;
                count?: number;
                returned?: number;
                nextPage?: number | null;
            }[];
            totals?: {
                fetched?: number;
                written?: number;
                skipped?: number;
                readyCandidates?: number;
            };
            kv?: {
                reads?: number;
                writes?: number;
                indexLoads?: number;
                indexWrites?: number;
                bytesRead?: number;
                bytesWritten?: number;
            };
            api?: {
                requests?: number;
                pages?: {
                    page?: number;
                    returned?: number;
                    count?: number;
                    nextPage?: number | null;
                }[];
            };
            cache?: {
                hits?: number;
                misses?: number;
                updated?: number;
            };
            cursor?: {
                before?: components["schemas"]["OrderCursor"] | null;
                after?: components["schemas"]["OrderCursor"] | null;
            };
            timing?: {
                toastFetchMs?: number;
                kvMs?: number;
                totalMs?: number;
            };
            params?: {
                limit?: number;
                detail?: string;
                debug?: boolean;
                since?: string | null;
                locationId?: string | null;
                status?: string | null;
                pageSize?: number | null;
            } & {
                [key: string]: unknown;
            };
            resultCount?: number;
        } & {
            [key: string]: unknown;
        };
        OrdersLatestError: {
            /** @constant */
            ok: false;
            /** @example /api/orders */
            route: string;
            error: string;
        } & {
            [key: string]: unknown;
        };
        OrdersLatestResponse: components["schemas"]["OrdersLatestSuccessFull"] | components["schemas"]["OrdersLatestSuccessIds"] | components["schemas"]["OrdersLatestError"];
        OrdersLatestSource: {
            id: string;
            /** @enum {string} */
            source: "cache" | "api" | "merged";
        };
        OrdersLatestSuccessFull: components["schemas"]["OrdersLatestBase"] & {
            /** @enum {string} */
            detail?: "full";
            orders: components["schemas"]["ToastOrder"][];
            data?: components["schemas"]["ToastOrder"][];
        };
        OrdersLatestSuccessIds: components["schemas"]["OrdersLatestBase"] & {
            /** @enum {string} */
            detail?: "ids";
            orders: string[];
        };
        /**
         * Check
         * @description Represents a single check within an order, containing selections, discounts, service charges, and payments.
         */
        ToastCheck: {
            /** @description Toast-maintained GUID for the referenced entity. */
            guid: string;
            /** @description Type discriminator returned by Toast (response only). */
            entityType?: string;
            /** @description External identifier string prefixed by the naming authority. */
            externalId?: string;
            /**
             * Format: date-time
             * @description Timestamp when Toast received the check.
             */
            createdDate?: string;
            /**
             * Format: date-time
             * @description Timestamp when the check opened (defaults to current time).
             */
            openedDate?: string;
            /**
             * Format: date-time
             * @description Timestamp when payment status became CLOSED.
             */
            closedDate?: string;
            /**
             * Format: date-time
             * @description Most recent modification timestamp.
             */
            modifiedDate?: string;
            /**
             * Format: date-time
             * @description Timestamp when the check was deleted (epoch when active).
             */
            deletedDate?: string;
            /** @description True when the check was deleted. */
            deleted?: boolean;
            /** @description Menu item and modifier selections on the check. */
            selections: Record<string, never>[];
            /** @description Guest information attached to the check (required for takeout/delivery POSTs). */
            customer?: Record<string, never>;
            /** @description Loyalty program metadata associated with the check. */
            appliedLoyaltyInfo?: Record<string, never>;
            /** @description True when the check is tax exempt (defaults to false). */
            taxExempt?: boolean;
            /** @description Ticket display number (not guaranteed unique). */
            displayNumber?: string;
            /** @description Service charges applied to the check. */
            appliedServiceCharges?: Record<string, never>[];
            /** @description Calculated check total excluding gratuity and taxes (response only). */
            amount?: number;
            /** @description Calculated tax amount including service charge taxes (response only). */
            taxAmount?: number;
            /** @description Total amount including discounts and taxes. */
            totalAmount?: number;
            /** @description Payments applied to the check. */
            payments?: Record<string, never>[];
            /** @description Tab name shown on the KDS (max 255 characters). */
            tabName?: string;
            /**
             * @description Payment workflow status (response only).
             * @enum {string}
             */
            paymentStatus?: "OPEN" | "PAID" | "CLOSED";
            /** @description Discounts applied to the check. */
            appliedDiscounts?: Record<string, never>[];
            /** @description True when the check was voided (response only). */
            voided?: boolean;
            /**
             * Format: date-time
             * @description Timestamp when the check was voided (response only).
             */
            voidDate?: string;
            /** @description Business date (yyyyMMdd) for the void (response only). */
            voidBusinessDate?: number;
            /**
             * Format: date-time
             * @description Most recent payment timestamp (defaults to now on POST).
             */
            paidDate?: string;
            /** @description Toast POS device that created the check. */
            createdDevice?: {
                /** @description Device identifier */
                id?: string;
            };
            /** @description Toast POS device that last modified the check. */
            lastModifiedDevice?: {
                /** @description Device identifier */
                id?: string;
            };
            /** @description Seconds between creation and payment (response only). */
            duration?: number;
            /** @description Employee who opened the check. */
            openedBy?: {
                /** @description Toast-maintained GUID for the referenced entity. */
                guid: string;
                /** @description Type discriminator returned by Toast (response only). */
                entityType?: string;
                /** @description External identifier string prefixed by the naming authority. */
                externalId?: string;
            };
        };
        /**
         * MenuItem
         * @description Menu item configuration including pricing, tags, and modifier group references.
         */
        ToastMenuItem: {
            /** @description Guest-facing name (Toast substitutes "Missing name" when blank). */
            name?: string;
            /** @description Kitchen ticket label for the item. */
            kitchenName?: string;
            /** @description Menu item GUID assigned by Toast. */
            guid?: string;
            /** @description Identifier shared across locations for the same conceptual item. */
            multiLocationId?: string;
            /** @description Optional description displayed in menus. */
            description?: string;
            /** @description Item tags such as vegetarian, gluten-free, or alcohol. */
            itemTags?: Record<string, never>[];
            /** @description Resolved price for the menu item. */
            price?: number;
            /**
             * @description Unit of measure for weighed pricing.
             * @enum {string}
             */
            unitOfMeasure?: "NONE" | "LB" | "OZ" | "KG" | "G";
            /** @description Portion definitions available for the item (for example, pizza halves). */
            portions?: Record<string, never>[];
            /** @description Reference IDs for modifier groups applied to this item. */
            modifierGroupReferences?: number[];
            /** @description Prep time in seconds (nullable). */
            prepTime?: number;
            /** @description GUIDs for assigned prep stations. */
            prepStations?: string[];
        };
        /**
         * Restaurant
         * @description Menus API restaurant payload containing published menus plus modifier references.
         */
        ToastMenusDocument: {
            /**
             * Format: uuid
             * @description Restaurant GUID associated with the published menus.
             */
            restaurantGuid?: string;
            /** @description Timestamp when menu data was last published. */
            lastUpdated?: string;
            /** @description Restaurant time zone expressed as an IANA identifier. */
            restaurantTimeZone?: string;
            /** @description Published menus for the restaurant. */
            menus?: Record<string, never>[];
            /** @description Dictionary of modifier groups keyed by referenceId. */
            modifierGroupReferences?: Record<string, never>;
            /** @description Dictionary of modifier options keyed by referenceId. */
            modifierOptionReferences?: Record<string, never>;
            /** @description Dictionary of pre-modifier groups keyed by referenceId. */
            preModifierGroupReferences?: Record<string, never>;
        };
        /**
         * ModifierGroup
         * @description Modifier group configuration describing pricing strategy and selection rules.
         */
        ToastModifierGroup: {
            /** @description Display name for the modifier group. */
            name?: string;
            /** @description Modifier group GUID assigned by Toast. */
            guid?: string;
            /** @description Numeric identifier used by menu items to reference the group. */
            referenceId?: number;
            /** @description Pricing strategy for the modifier group (NONE, SIZE_PRICE, SEQUENCE_PRICE, SIZE_SEQUENCE_PRICE). */
            pricingStrategy?: string;
            /** @description Strategy-specific pricing rules used when calculating option prices. */
            pricingRules?: Record<string, never>;
            /**
             * @description Whether default modifiers add to the parent item price (YES/NO).
             * @enum {string}
             */
            defaultOptionsChargePrice?: "NO" | "YES";
            /**
             * @description Whether substitution pricing is enabled for the group (YES/NO).
             * @enum {string}
             */
            defaultOptionsSubstitutionPricing?: "NO" | "YES";
            /** @description Minimum number of modifier options required. */
            minSelections?: number;
            /** @description Maximum number of modifier options allowed (null indicates unlimited). */
            maxSelections?: number;
            /**
             * @description POS behavior for presenting the group (REQUIRED, OPTIONAL_FORCE_SHOW, OPTIONAL).
             * @enum {string}
             */
            requiredMode?: "REQUIRED" | "OPTIONAL_FORCE_SHOW" | "OPTIONAL";
            /** @description True when multiple modifier options may be selected. */
            isMultiSelect?: boolean;
            /** @description ReferenceId of the associated premodifier group. */
            preModifierGroupReference?: number;
            /** @description Reference IDs for modifier options contained in the group. */
            modifierOptionReferences?: number[];
        };
        /**
         * ModifierOption
         * @description Modifier option configuration including pricing strategy, tags, and availability metadata.
         */
        ToastModifierOption: {
            /** @description Numeric identifier referenced by modifier groups. */
            referenceId?: number;
            /** @description Display name for the modifier option (Toast substitutes "Missing name" when blank). */
            name?: string;
            /** @description Modifier option GUID for the underlying item reference. */
            guid?: string;
            /** @description Resolved price for the modifier option (null when group-level pricing applies). */
            price?: number;
            /** @description Pricing strategy applied to the modifier option (GROUP_PRICE, BASE_PRICE, MENU_SPECIFIC_PRICE, TIME_SPECIFIC_PRICE, etc.). */
            pricingStrategy?: string;
            /** @description Pricing rules used when additional calculation is required. */
            pricingRules?: Record<string, never>;
            /** @description Item tags applied to the modifier option. */
            itemTags?: Record<string, never>[];
            /** @description Indicates whether the modifier option is included by default. */
            isDefault?: boolean;
            /** @description Indicates whether the modifier option can be selected multiple times. */
            allowsDuplicates?: boolean;
            /** @description Portions that the modifier option can cover. */
            portions?: Record<string, never>[];
        };
        /**
         * Order
         * @description A Toast platform order composed of one or more checks. Captures dining option, delivery metadata, pricing features, and workflow state.
         */
        ToastOrder: {
            /** @description Toast-maintained GUID for the referenced entity. */
            guid: string;
            /** @description Type discriminator returned by Toast (response only). */
            entityType?: string;
            /** @description External identifier string prefixed by the naming authority. */
            externalId?: string;
            /**
             * Format: date-time
             * @description Business date for the order (matches createdDate for ASAP and promisedDate for scheduled orders).
             */
            openedDate?: string;
            /**
             * Format: date-time
             * @description Most recent modification timestamp for the order or nested entities.
             */
            modifiedDate?: string;
            /**
             * Format: date-time
             * @description Scheduled fulfillment timestamp for future orders (null for dine-in / ASAP).
             */
            promisedDate?: string;
            /**
             * Format: uuid
             * @description Reserved UUID channel identifier.
             */
            channelGuid?: string;
            /** @description Restaurant-configured dining option applied to the order. */
            diningOption: {
                /** @description Toast-maintained GUID for the referenced entity. */
                guid: string;
                /** @description Type discriminator returned by Toast (response only). */
                entityType?: string;
                /** @description External identifier string prefixed by the naming authority. */
                externalId?: string;
            };
            /** @description Checks that belong to the order (most orders have one check). */
            checks: Record<string, never>[];
            /** @description Table where the order was placed. */
            table?: {
                /** @description Toast-maintained GUID for the referenced entity. */
                guid: string;
                /** @description Type discriminator returned by Toast (response only). */
                entityType?: string;
                /** @description External identifier string prefixed by the naming authority. */
                externalId?: string;
            };
            /** @description Service area metadata (response only). */
            serviceArea?: {
                /** @description Toast-maintained GUID for the referenced entity. */
                guid: string;
                /** @description Type discriminator returned by Toast (response only). */
                entityType?: string;
                /** @description External identifier string prefixed by the naming authority. */
                externalId?: string;
            };
            /** @description Meal service associated with the order (response only). */
            restaurantService?: {
                /** @description Toast-maintained GUID for the referenced entity. */
                guid: string;
                /** @description Type discriminator returned by Toast (response only). */
                entityType?: string;
                /** @description External identifier string prefixed by the naming authority. */
                externalId?: string;
            };
            /** @description Revenue center assigned to the order. */
            revenueCenter?: {
                /** @description Toast-maintained GUID for the referenced entity. */
                guid: string;
                /** @description Type discriminator returned by Toast (response only). */
                entityType?: string;
                /** @description External identifier string prefixed by the naming authority. */
                externalId?: string;
            };
            /** @description Ordering channel reported by Toast (In Store, Online, API, Kiosk, Branded channels, Catering, etc.). */
            source?: string;
            /** @description Seconds between creation and payment (response only). */
            duration?: number;
            /** @description Delivery metadata required for orders fulfilled via DELIVERY behavior. */
            deliveryInfo?: Record<string, never>;
            /**
             * Format: duration
             * @description ISO-8601 duration overriding the default prep window (increments of five minutes).
             */
            requiredPrepTime?: string;
            /**
             * Format: date-time
             * @description Expected ready-for-pickup or delivery timestamp (response only).
             */
            estimatedFulfillmentDate?: string;
            /** @description Number of guests associated with the order. */
            numberOfGuests?: number;
            /** @description Set to true when the order was voided (response only). */
            voided?: boolean;
            /**
             * Format: date-time
             * @description Timestamp when the order was voided (response only).
             */
            voidDate?: string;
            /** @description Business date (yyyyMMdd) associated with the void (response only). */
            voidBusinessDate?: number;
            /**
             * Format: date-time
             * @description Most recent payment timestamp (defaults to current time on POST).
             */
            paidDate?: string;
            /**
             * Format: date-time
             * @description Timestamp when payment status transitioned to CLOSED.
             */
            closedDate?: string;
            /**
             * Format: date-time
             * @description Timestamp when the order was deleted (1970 epoch when not deleted).
             */
            deletedDate?: string;
            /** @description True when the order has been deleted (response only). */
            deleted?: boolean;
            /** @description Business date (yyyyMMdd) on which the order was fulfilled (response only). */
            businessDate?: number;
            /** @description Employee assigned to the order. */
            server?: {
                /** @description Toast-maintained GUID for the referenced entity. */
                guid: string;
                /** @description Type discriminator returned by Toast (response only). */
                entityType?: string;
                /** @description External identifier string prefixed by the naming authority. */
                externalId?: string;
            };
            /** @description Pricing features applied to the order (for example, TAXESV2, TAXESV3). */
            pricingFeatures?: string[];
            /**
             * @description Approval workflow state for the order (response only).
             * @enum {string}
             */
            approvalStatus?: "NEEDS_APPROVAL" | "APPROVED" | "FUTURE" | "NOT_APPROVED";
            /** @description Toast POS device that created the order. */
            createdDevice?: {
                /** @description Device identifier */
                id?: string;
            };
            /**
             * Format: date-time
             * @description Timestamp when Toast received the order.
             */
            createdDate?: string;
            /** @description Toast POS device that last modified the order. */
            lastModifiedDevice?: {
                /** @description Device identifier */
                id?: string;
            };
            /** @description Guest-provided curbside pickup identifiers. */
            curbsidePickupInfo?: Record<string, never>;
            /** @description Marketplace facilitator tax metadata supplied on POST requests. */
            marketplaceFacilitatorTaxInfo?: Record<string, never>;
            /** @description True when the order was created while the restaurant was in test mode. */
            createdInTestMode?: boolean;
            /** @description Guest packaging preferences for the order. */
            appliedPackagingInfo?: Record<string, never>;
            /** @description True when the order tracks excess food rather than a guest sale (response only). */
            excessFood?: boolean;
            /** @description Display number printed on receipts/tickets (response only). */
            displayNumber?: string;
            /** @description Auxiliary Toast order context containing alternate timestamps and location metadata. */
            context?: Record<string, never>;
        };
        /**
         * Selection
         * @description Represents a primary menu item or modifier selection. Supports nested modifiers, pricing metadata, and fulfillment state.
         */
        ToastSelection: {
            /** @description Toast-maintained GUID for the referenced entity. */
            guid: string;
            /** @description Type discriminator returned by Toast (response only). */
            entityType?: string;
            /** @description External identifier string prefixed by the naming authority. */
            externalId?: string;
            /** @description Reference to the selected menu item. */
            item: Record<string, never>;
            /** @description Menu group reference from which the item was selected. */
            itemGroup: Record<string, never>;
            /** @description Modifier group reference for modifier selections. */
            optionGroup?: Record<string, never>;
            /** @description Selected pre-modifier reference. */
            preModifier?: Record<string, never>;
            /** @description Quantity ordered (supports decimals for weighted items). */
            quantity: number;
            /** @description Seat assignment for the selection (response only, 0 = shared, -1 = unassigned). */
            seatNumber?: number;
            /**
             * @description Unit of measure required for weighed items.
             * @enum {string}
             */
            unitOfMeasure?: "NONE" | "LB" | "OZ" | "KG" | "G";
            /**
             * @description Classification for the selection (OPEN_ITEM, SPECIAL_REQUEST, HOUSE_ACCOUNT_PAY_BALANCE, etc.).
             * @enum {string}
             */
            selectionType?: "NONE" | "OPEN_ITEM" | "SPECIAL_REQUEST" | "PORTION" | "HOUSE_ACCOUNT_PAY_BALANCE" | "TOAST_CARD_SELL" | "TOAST_CARD_RELOAD";
            /** @description Sales category reference associated with the selection (response only). */
            salesCategory?: Record<string, never>;
            /** @description Discounts applied directly to this selection (response only). */
            appliedDiscounts?: Record<string, never>[];
            /** @description True when the selection tracks deferred revenue (for example, gift card). */
            deferred?: boolean;
            /** @description Gross sale price before discounts (response only). */
            preDiscountPrice?: number;
            /** @description Net price after discounts and modifiers (response only). */
            price?: number;
            /** @description Total tax amount collected for this selection (response only). */
            tax?: number;
            /** @description True when the selection was voided (response only). */
            voided?: boolean;
            /**
             * Format: date-time
             * @description Timestamp when the selection was voided (response only).
             */
            voidDate?: string;
            /** @description Business date (yyyyMMdd) when the selection was voided (response only). */
            voidBusinessDate?: number;
            /** @description Void reason reference (response only). */
            voidReason?: Record<string, never>;
            /** @description Refund metadata for the selection. */
            refundDetails?: Record<string, never>;
            /** @description Display name for the selection (also used for special request text). */
            displayName?: string;
            /**
             * Format: date-time
             * @description Timestamp when the selection was created.
             */
            createdDate?: string;
            /**
             * Format: date-time
             * @description Timestamp when the selection was last modified.
             */
            modifiedDate?: string;
            /** @description Nested modifier selections applied to this selection. */
            modifiers?: Record<string, never>[];
            /**
             * @description Kitchen display workflow status (response only).
             * @enum {string}
             */
            fulfillmentStatus?: "NEW" | "HOLD" | "SENT" | "READY";
            /** @description Fulfillment requirements for the selection (response only). */
            fulfillment?: Record<string, never>;
            /**
             * @description Indicates whether the selection price includes tax or inherits from parent.
             * @enum {string}
             */
            taxInclusion?: "INCLUDED" | "NOT_INCLUDED" | "INHERITED";
            /** @description Tax breakdown applied to the selection (response only). */
            appliedTaxes?: Record<string, never>[];
            /** @description Dining option reference applied to the selection (response only). */
            diningOption?: Record<string, never>;
            /** @description Open-price override amount supplied at order time (POST only). */
            openPriceAmount?: number;
            /** @description Price before quantity, taxes, or discounts are applied. */
            receiptLinePrice?: number;
            /**
             * @description Pricing mode inherited from the associated modifier group.
             * @enum {string}
             */
            optionGroupPricingMode?: "INCLUDED" | "FIXED_PRICE" | "ADJUSTS_PRICE" | "REPLACES_PRICE" | "LOCATION_SPECIFIC_PRICE";
            /** @description Marketplace facilitator calculated price (POST only). */
            externalPriceAmount?: number;
            /** @description Reserved Toast reference for split operations. */
            splitOrigin?: Record<string, never>;
        };
        UpstreamSummary: {
            /** @enum {string} */
            path: "direct" | "network";
            ok: boolean;
            status: number | null;
            /** @description Parsed upstream body when available. */
            body: {
                [key: string]: unknown;
            } | unknown[] | string | number | boolean | null;
            errorMessage?: string;
        };
        UpstreamTrace: {
            /** @enum {string} */
            path: "direct" | "network";
            internalFallbackUsed?: boolean;
            url: string;
            absoluteUrl: string;
            status?: number | null;
            ok?: boolean | null;
            bytes?: number | null;
            snippet?: string | null;
            cacheStatus?: string | null;
            cacheHit?: boolean | null;
            updatedAt?: string | null;
        } & {
            [key: string]: unknown;
        };
    };
    responses: never;
    parameters: {
        /** @description Force a synchronous refresh of the published menu when set to a truthy value. */
        MenusRefresh: boolean;
        /** @description Include detailed diagnostics when enabled and the worker permits debug output. */
        OrdersDetailedDebug: boolean;
        /** @description ISO-8601 timestamp for the latest order to include. */
        OrdersDetailedEnd: string;
        /** @description Filter by normalized item fulfillment statuses. May be repeated or comma separated. */
        OrdersDetailedFulfillmentStatus: ("NEW" | "HOLD" | "SENT" | "READY")[];
        /** @description Maximum number of expanded orders to return (defaults to 5, maximum 500). */
        OrdersDetailedLimit: number;
        /** @description Restrict results to the specified Toast location GUID. */
        OrdersDetailedLocationId: string;
        /** @description Look back this many minutes from "now" when no explicit window is provided. */
        OrdersDetailedMinutes: number;
        /** @description Forwarded to `/api/menus` to force a synchronous refresh when set to `1`. */
        OrdersDetailedRefresh: boolean;
        /** @description ISO-8601 timestamp for the earliest order to include. */
        OrdersDetailedStart: string;
        /** @description Filter orders by Toast status (case insensitive). */
        OrdersDetailedStatus: string;
        /** @description Explicit Toast business date (yyyyMMdd) to anchor the fetch window. */
        OrdersLatestBusinessDate: string;
        /** @description Include extended diagnostics when `true` and the worker runs with `DEBUG` enabled. */
        OrdersLatestDebug: boolean;
        /** @description Toggle payload verbosity (`full` returns hydrated orders, `ids` returns GUIDs only). */
        OrdersLatestDetail: "full" | "ids";
        /** @description ISO-8601 timestamp that constrains the upper bound of the fetch window. */
        OrdersLatestEnd: string;
        /** @description Maximum number of orders to return (defaults to 5). */
        OrdersLatestLimit: number;
        /** @description Override the rolling window with an explicit lookback in minutes. */
        OrdersLatestMinutes: number;
        /** @description Hint for the Toast bulk API page size (advanced diagnostics only). */
        OrdersLatestPageSize: number;
        /** @description Override the internal cursor with an ISO-8601 timestamp (debugging aid). */
        OrdersLatestSince: string;
        /** @description ISO-8601 timestamp that constrains the lower bound of the fetch window. */
        OrdersLatestStart: string;
        /** @description IANA time zone identifier used to interpret time-based parameters (defaults to UTC). */
        OrdersLatestTimeZone: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
